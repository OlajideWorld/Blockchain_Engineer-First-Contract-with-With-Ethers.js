import { ethers } from "ethers";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

console.log("Testing EVM Solidity Contract");

const startcontract = async () => {
  // We need a provider
  const provider = new ethers.JsonRpcProvider(process.env.jsonRpcGanarche);

  // // we need a wallet (USE THIS IF YOUR PRIVATE KEY IS IN A DOTENV FILE)
  // const wallet = new ethers.Wallet(process.env.privateKey_ganarche, provider);

  // Get a wallet if your Private Key is Encrypted in a Json File
  const decryptedKey = fs.readFileSync("./.encryptedKey.json", "utf8");
  let wallet = await ethers.Wallet.fromEncryptedJson(
    decryptedKey,
    process.env.keyPassword
  );

  wallet = await wallet.connect(provider);

  // we need the abi and the bin of the smart contract
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const bin = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");

  // we start with the contract factory
  const contractFactory = new ethers.ContractFactory(abi, bin, wallet);
  console.log("====== Contract Deploy Started.... ==========");
  console.log("===========");
  // get the contract
  const contract = await contractFactory.deploy();
  // console.log(contract);

  // // get the contract transaction response
  // const deploymentTransaction = contract.deploymentTransaction();
  // console.log("deployment Transaction Response: ");
  // console.log(deploymentTransaction);

  // console.log("===========");
  // // get the contract transaction receipt
  // const transactionReceipt = await deploymentTransaction.wait(1);
  // console.log("Transaction Receipt: ");
  // console.log(transactionReceipt);

  // get the contract address
  console.log("===========");
  const contractAddress = await contract.getAddress();
  console.log("Contract Address: ");
  console.log(contractAddress);

  // Lets start working with the contract
  const viewFavouriteNumber = await contract.viewFunction();
  console.log(`Current Favourite Number is: ${viewFavouriteNumber.toString()}`);

  console.log("========= changing the state of the favouriteNumber =====");
  const transactionResponse = await contract.saveFavouriteNumeber("21");
  const transactionReceipt = await transactionResponse.wait(1);

  console.log("========== checking the new favourite Number");
  const newFavNumber = await contract.viewFunction();
  console.log(`New Favourite Number: ${newFavNumber.toString()}`);

  // OR

  // // you can send Raw transaction on the garnache too
  // const nonce = await wallet.getNonce();
  // const network = await wallet.provider.getNetwork();
  // const chainId = network.chainId; // YOU CAN GET YOUR CHAIN ID FROM HERE !!!

  // const tx = {
  //   nonce: nonce,
  //   gasPrice: "20000000000",
  //   gasLimit: "2000000",
  //   to: null,
  //   value: 0,
  //   data: "0x608060405260016000806101000a81548160ff02191690831515021790555060ea60015560ea6002557f54696d6f7468790000000000000000000000000000000000000000000000000060035573fb649728f35781d82e96e575af7b2972ad80d9d2600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600781526020017f4f6c616a69646500000000000000000000000000000000000000000000000000815250600590805190602001906100ec9291906100ff565b503480156100f957600080fd5b50610202565b82805461010b906101d1565b90600052602060002090601f01602090048101928261012d5760008555610174565b82601f1061014657805160ff1916838001178555610174565b82800160010185558215610174579182015b82811115610173578251825591602001919060010190610158565b5b5090506101819190610185565b5090565b5b8082111561019e576000816000905550600101610186565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101e957607f821691505b6020821081036101fc576101fb6101a2565b5b50919050565b61088c806102116000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636729ea7e1161005b5780636729ea7e146100ff578063795fff1d1461011d578063dc1741c314610139578063ed36b3d8146101695761007d565b806303cf72251461008257806304bbbed9146100b25780631866a438146100ce575b600080fd5b61009c60048036038101906100979190610424565b610187565b6040516100a99190610460565b60405180910390f35b6100cc60048036038101906100c79190610424565b61019d565b005b6100e860048036038101906100e39190610424565b6101a7565b6040516100f6929190610514565b60405180910390f35b610107610263565b6040516101149190610460565b60405180910390f35b61013760048036038101906101329190610679565b610269565b005b610153600480360381019061014e91906106d5565b6102ff565b6040516101609190610460565b60405180910390f35b61017161032d565b60405161017e9190610460565b60405180910390f35b6000600182610196919061074d565b9050919050565b8060018190555050565b600781815481106101b757600080fd5b90600052602060002090600202016000915090508060000180546101da906107d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610206906107d2565b80156102535780601f1061022857610100808354040283529160200191610253565b820191906000526020600020905b81548152906001019060200180831161023657829003601f168201915b5050505050908060010154905082565b60015481565b60006040518060400160405280848152602001838152509050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906102ca929190610337565b50602082015181600101555050816006846040516102e8919061083f565b908152602001604051809103902081905550505050565b6006818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600154905090565b828054610343906107d2565b90600052602060002090601f01602090048101928261036557600085556103ac565b82601f1061037e57805160ff19168380011785556103ac565b828001600101855582156103ac579182015b828111156103ab578251825591602001919060010190610390565b5b5090506103b991906103bd565b5090565b5b808211156103d65760008160009055506001016103be565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610401816103ee565b811461040c57600080fd5b50565b60008135905061041e816103f8565b92915050565b60006020828403121561043a576104396103e4565b5b60006104488482850161040f565b91505092915050565b61045a816103ee565b82525050565b60006020820190506104756000830184610451565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104b557808201518184015260208101905061049a565b838111156104c4576000848401525b50505050565b6000601f19601f8301169050919050565b60006104e68261047b565b6104f08185610486565b9350610500818560208601610497565b610509816104ca565b840191505092915050565b6000604082019050818103600083015261052e81856104db565b905061053d6020830184610451565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610586826104ca565b810181811067ffffffffffffffff821117156105a5576105a461054e565b5b80604052505050565b60006105b86103da565b90506105c4828261057d565b919050565b600067ffffffffffffffff8211156105e4576105e361054e565b5b6105ed826104ca565b9050602081019050919050565b82818337600083830152505050565b600061061c610617846105c9565b6105ae565b90508281526020810184848401111561063857610637610549565b5b6106438482856105fa565b509392505050565b600082601f8301126106605761065f610544565b5b8135610670848260208601610609565b91505092915050565b600080604083850312156106905761068f6103e4565b5b600083013567ffffffffffffffff8111156106ae576106ad6103e9565b5b6106ba8582860161064b565b92505060206106cb8582860161040f565b9150509250929050565b6000602082840312156106eb576106ea6103e4565b5b600082013567ffffffffffffffff811115610709576107086103e9565b5b6107158482850161064b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610758826103ee565b9150610763836103ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107985761079761071e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ea57607f821691505b6020821081036107fd576107fc6107a3565b5b50919050565b600081905092915050565b60006108198261047b565b6108238185610803565b9350610833818560208601610497565b80840191505092915050565b600061084b828461080e565b91508190509291505056fea26469706673582212201e474ceeb5739d6f10ddaff2867e18d270814f8f1a1811f7ea127917bbdd13a364736f6c634300080e0033",
  //   chainId: chainId, // OR YOU CAN USE THIS 1337
  // };

  // const sendTransaction = await wallet.sendTransaction(tx);
  // console.log(sendTransaction);
};

// incase you are having problems with working with garnache just change your solc version to 0.8.14-fixed, then recompile the solidity file and deploy again
startcontract();
